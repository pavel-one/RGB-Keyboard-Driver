package keyboard

import (
	"github.com/karalabe/hid"
	"log"
)

type Keyboard struct {
	VendorID  uint16
	ProductID uint16
	Device    *hid.Device
	RGBState  []byte
	Keymap    []*Key
}

func NewKeyboard() (*Keyboard, error) {
	vid := uint16(1046)  //TODO: Set vid
	pid := uint16(49989) //TODO: set pid

	keyboard := &Keyboard{
		VendorID:  vid,
		ProductID: pid,
	}

	keyboard.setKeymap()

	// open
	if err := keyboard.openDevice(); err != nil {
		return nil, err
	}

	// reset led
	if err := keyboard.ResetState(); err != nil {
		return nil, err
	}

	//go keyboard.WelcomeEffect()

	keyboard.Fill(247, 22, 195)

	return keyboard, nil
}

func (k *Keyboard) openDevice() error {
	devices := hid.Enumerate(k.VendorID, k.ProductID)
	d, err := devices[2].Open()
	if err != nil {
		return err
	}
	k.Device = d

	return nil
}

func (k *Keyboard) ResetState() error {
	k.RGBState = k.getResetBytes()
	write, err := k.Update()
	if err != nil {
		return err
	}

	log.Printf("Writing %d bytes", write)

	return nil
}

func (k *Keyboard) Update() (int, error) {
	return k.Device.Write(k.RGBState)
}

func (k *Keyboard) UpdateWithKeys() (int, error) {
	for _, key := range k.Keymap {
		k.RGBState[key.Address[0]-1] = byte(key.Red)
		k.RGBState[key.Address[1]-1] = byte(key.Green)
		k.RGBState[key.Address[2]-1] = byte(key.Blue)
	}

	return k.Update()
}

func (k *Keyboard) setKeymap() {
	k.Keymap = []*Key{
		NewKey("ESC", 7, 8, 9),
		NewKey("F1", 13, 14, 15),
		NewKey("F2", 16, 17, 18),
		NewKey("F3", 19, 20, 21),
		NewKey("F4", 22, 23, 24),
		NewKey("F5", 28, 29, 30),
		NewKey("F6", 31, 32, 33),
		NewKey("F7", 34, 35, 36),
		NewKey("F8", 37, 38, 39),
		NewKey("F9", 40, 41, 42),
		NewKey("F10", 43, 44, 45),
		NewKey("F11", 46, 47, 48),
		NewKey("F12", 49, 50, 51),
		NewKey("PRINT", 52, 53, 54),
		NewKey("SCROLL", 55, 56, 57),
		NewKey("PAUSE", 58, 59, 60),
	}
}

func (k *Keyboard) getDemoData() []byte {
	return []byte{
		0x01, 0x0f, 0x00, 0x00, 0x00, 0x36, 0xff, 0x73,
		0x73, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x0b,
		0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73,
		0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x0b, 0x73,
		0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b,
		0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73,
		0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73,
		0x73, 0xff, 0x73, 0x73, 0x00, 0x00, 0x00, 0x00,

		0x01, 0x0f, 0x00, 0x00, 0x01, 0x36, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73,
		0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73,
		0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b,
		0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73,
		0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73,
		0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x01, 0x0f, 0x00, 0x00, 0x02, 0x36, 0x3F, 0x0b,
		0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b,
		0x73, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x73,
		0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b,
		0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73,
		0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73,
		0x73, 0x0b, 0x73, 0x73, 0x00, 0x00, 0x00, 0x00,

		0x01, 0x0f, 0x00, 0x00, 0x03, 0x36, 0x0b, 0x73,
		0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x00,
		0x00, 0x00, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73,
		0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x0b, 0x73, 0x73, 0x00, 0x00, 0x00,
		0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73,
		0x73, 0x0b, 0x73, 0x73, 0x00, 0x00, 0x00, 0x00,

		0x01, 0x0f, 0x00, 0x00, 0x04, 0x36, 0x0b, 0x73,
		0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b,
		0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73,
		0x0b, 0x73, 0x73, 0x00, 0x00, 0x00, 0x0b, 0x73,
		0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x73,
		0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x01, 0x0f, 0x00, 0x00, 0x05, 0x36, 0x0b, 0x73,
		0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b,
		0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73,
		0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73,
		0x73, 0x0b, 0x73, 0x73, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x0b, 0x73, 0x73, 0x00, 0x00, 0x00,
		0x0b, 0x73, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x01, 0x0f, 0x00, 0x00, 0x06, 0x36, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x0b,
		0x73, 0x73, 0x0b, 0x73, 0x73, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x73,
		0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73,
		0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x00, 0x00,
		0x00, 0x0b, 0x73, 0x73, 0x00, 0x00, 0x00, 0x00,

		0x01, 0x0f, 0x00, 0x00, 0x07, 0x12, 0x0b, 0x73,
		0x73, 0x0b, 0x73, 0x73,
	}
}

func (k *Keyboard) getResetBytes() []byte {
	return []byte{
		0x01, 0x0f, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x01, 0x0f, 0x00, 0x00, 0x01, 0x36, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x01, 0x0f, 0x00, 0x00, 0x02, 0x36, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x01, 0x0f, 0x00, 0x00, 0x03, 0x36, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x01, 0x0f, 0x00, 0x00, 0x04, 0x36, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x01, 0x0f, 0x00, 0x00, 0x05, 0x36, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x01, 0x0f, 0x00, 0x00, 0x06, 0x36, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x01, 0x0f, 0x00, 0x00, 0x07, 0x12, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
	}
}
