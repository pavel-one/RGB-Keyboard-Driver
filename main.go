package main

import (
	"github.com/karalabe/hid"
	"log"
	"strconv"
)

func main() {
	Run()
	log.Println("END!")
}

func Run() {

	pid := "c345"
	vid := "0416"
	dc, _ := strconv.ParseUint(pid, 16, 64)
	vc, _ := strconv.ParseUint(vid, 16, 64)

	devices := hid.Enumerate(uint16(vc), uint16(dc))
	log.Println(devices)

	if err := WriteBytes(devices[2]); err != nil {
		log.Fatal(err)
	}

	return
}

func WriteBytes(device hid.DeviceInfo) error {
	allBytes := make([][]byte, 10)
	allBytes[0] = []byte{
		0x01, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	allBytes[1] = []byte{
		0x01, 0x0f, 0x00, 0x00, 0x00, 0x36, 0xff, 0x73,
		0x73, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x0b,
		0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73,
		0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x0b, 0x73,
		0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b,
		0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73,
		0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73,
		0x73, 0xff, 0x73, 0x73, 0x00, 0x00, 0x00, 0x00,
	}

	allBytes[2] = []byte{
		0x01, 0x0f, 0x00, 0x00, 0x01, 0x36, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73,
		0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73,
		0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b,
		0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73,
		0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73,
		0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	allBytes[3] = []byte{
		0x01, 0x0f, 0x00, 0x00, 0x02, 0x36, 0x0b, 0x73,
		0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b,
		0x73, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x73,
		0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b,
		0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73,
		0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73,
		0x73, 0x0b, 0x73, 0x73, 0x00, 0x00, 0x00, 0x00,
	}

	allBytes[4] = []byte{
		0x01, 0x0f, 0x00, 0x00, 0x03, 0x36, 0x0b, 0x73,
		0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x00,
		0x00, 0x00, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73,
		0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x0b, 0x73, 0x73, 0x00, 0x00, 0x00,
		0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73,
		0x73, 0x0b, 0x73, 0x73, 0x00, 0x00, 0x00, 0x00,
	}

	allBytes[5] = []byte{
		0x01, 0x0f, 0x00, 0x00, 0x04, 0x36, 0x0b, 0x73,
		0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b,
		0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73,
		0x0b, 0x73, 0x73, 0x00, 0x00, 0x00, 0x0b, 0x73,
		0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x73,
		0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	allBytes[6] = []byte{
		0x01, 0x0f, 0x00, 0x00, 0x05, 0x36, 0x0b, 0x73,
		0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b,
		0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73,
		0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x0b, 0x73,
		0x73, 0x0b, 0x73, 0x73, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x0b, 0x73, 0x73, 0x00, 0x00, 0x00,
		0x0b, 0x73, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	allBytes[7] = []byte{
		0x01, 0x0f, 0x00, 0x00, 0x06, 0x36, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x0b, 0x73, 0x73, 0x0b,
		0x73, 0x73, 0x0b, 0x73, 0x73, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x73,
		0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73,
		0x0b, 0x73, 0x73, 0x0b, 0x73, 0x73, 0x00, 0x00,
		0x00, 0x0b, 0x73, 0x73, 0x00, 0x00, 0x00, 0x00,
	}

	allBytes[8] = []byte{
		0x01, 0x0f, 0x00, 0x00, 0x07, 0x12, 0x0b, 0x73,
		0x73, 0x0b, 0x73, 0x73, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	allBytes[9] = []byte{
		0x01, 0x0f, 0x01, 0x00, 0x00, 0x36, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	d, err := device.Open()
	if err != nil {
		return err
	}

	for _, b := range allBytes {
		write, err := d.Write(b)
		if err != nil {
			return err
		}

		log.Printf("Send %d byte", write)
	}

	return nil
}
